name: Comprehensive Testing Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC for dependency vulnerability checks
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  CI: true

jobs:
  # Security and dependency checks
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Run ESLint security scan
        run: npm run test:security:lint

      - name: Upload security report
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: reports/security-report.json

  # Code quality and linting
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Validate HTML
        run: npm run validate

      - name: Upload lint results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: lint-results
          path: reports/eslint-report.json

  # Unit and integration tests
  unit-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit

      - name: Run integration tests
        run: npm run test:integration

      - name: Run coverage report
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.node-version }}
          path: |
            coverage/
            reports/

  # End-to-end tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Start HTTP server
        run: npm run serve &
        
      - name: Wait for server
        run: npx wait-on http://localhost:8080

      - name: Run E2E tests
        run: npx playwright test --project=${{ matrix.browser }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-results-${{ matrix.browser }}
          path: |
            test-results/
            reports/playwright/

  # Security-focused E2E tests
  security-e2e:
    name: Security E2E Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Start HTTP server
        run: npm run serve &
        
      - name: Wait for server
        run: npx wait-on http://localhost:8080

      - name: Run security E2E tests
        run: npx playwright test --project=security-tests

      - name: Upload security test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-e2e-results
          path: |
            test-results/
            reports/security/

  # Performance tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Start HTTP server
        run: npm run serve &
        
      - name: Wait for server
        run: npx wait-on http://localhost:8080

      - name: Run performance tests
        run: npx playwright test --project=performance-tests

      - name: Run Lighthouse audit
        run: npm run lighthouse

      - name: Upload performance results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: |
            reports/lighthouse.json
            reports/performance/

  # Accessibility tests
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start HTTP server
        run: npm run serve &
        
      - name: Wait for server
        run: npx wait-on http://localhost:8080

      - name: Run accessibility tests
        run: npm run accessibility

      - name: Upload accessibility results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: accessibility-results
          path: reports/accessibility/

  # Cross-browser compatibility
  cross-browser:
    name: Cross-Browser Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        browser: [chromium, firefox]
        exclude:
          # Exclude webkit on non-macOS for now
          - os: ubuntu-latest
            browser: webkit
          - os: windows-latest
            browser: webkit
        include:
          # Include webkit only on macOS
          - os: macos-latest
            browser: webkit
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Start HTTP server
        run: npm run serve &
        shell: bash
        
      - name: Wait for server (Unix)
        if: runner.os != 'Windows'
        run: npx wait-on http://localhost:8080

      - name: Wait for server (Windows)
        if: runner.os == 'Windows'
        run: |
          $timeout = 60
          $elapsed = 0
          do {
            try {
              Invoke-WebRequest -Uri "http://localhost:8080" -UseBasicParsing | Out-Null
              break
            } catch {
              Start-Sleep 1
              $elapsed++
            }
          } while ($elapsed -lt $timeout)
        shell: powershell

      - name: Run cross-browser tests
        run: npx playwright test --project=${{ matrix.browser }}

      - name: Upload cross-browser results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: cross-browser-${{ matrix.os }}-${{ matrix.browser }}
          path: |
            test-results/
            reports/

  # Deployment validation
  deployment-validation:
    name: Deployment Validation
    runs-on: ubuntu-latest
    needs: [security-audit, code-quality, unit-tests, e2e-tests]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate deployment readiness
        run: |
          echo "Validating deployment readiness..."
          # Check if all critical files exist
          test -f index.html || (echo "Missing index.html" && exit 1)
          test -f package.json || (echo "Missing package.json" && exit 1)
          test -f README.md || (echo "Missing README.md" && exit 1)
          
          # Validate HTML structure
          npm run validate
          
          # Check file sizes
          html_size=$(wc -c < index.html)
          if [ $html_size -gt 2000000 ]; then
            echo "Warning: index.html is larger than 2MB"
          fi
          
          echo "Deployment validation passed"

      - name: Create deployment artifact
        run: |
          mkdir -p deployment
          cp index.html deployment/
          cp *.min.js deployment/ 2>/dev/null || true
          cp README.md deployment/
          cp -r src deployment/ 2>/dev/null || true

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v3
        with:
          name: deployment-ready
          path: deployment/

  # Test results summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [security-audit, code-quality, unit-tests, e2e-tests, security-e2e, performance-tests, accessibility-tests]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate test summary
        run: |
          echo "# Test Results Summary" > test-summary.md
          echo "" >> test-summary.md
          echo "## Job Status" >> test-summary.md
          echo "- Security Audit: ${{ needs.security-audit.result }}" >> test-summary.md
          echo "- Code Quality: ${{ needs.code-quality.result }}" >> test-summary.md
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> test-summary.md
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> test-summary.md
          echo "- Security E2E: ${{ needs.security-e2e.result }}" >> test-summary.md
          echo "- Performance: ${{ needs.performance-tests.result }}" >> test-summary.md
          echo "- Accessibility: ${{ needs.accessibility-tests.result }}" >> test-summary.md
          echo "" >> test-summary.md
          echo "## Artifacts Generated" >> test-summary.md
          find . -name "*.json" -o -name "*.html" -o -name "*.xml" | head -20 >> test-summary.md

      - name: Upload test summary
        uses: actions/upload-artifact@v3
        with:
          name: test-summary
          path: test-summary.md

      - name: Comment PR with summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('test-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: always()
    steps:
      - name: Cleanup old artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            
            // Keep only the last 10 artifacts per type
            const artifactGroups = {};
            artifacts.artifacts.forEach(artifact => {
              const baseName = artifact.name.replace(/-\d+$/, '');
              if (!artifactGroups[baseName]) artifactGroups[baseName] = [];
              artifactGroups[baseName].push(artifact);
            });
            
            for (const [group, artifacts] of Object.entries(artifactGroups)) {
              if (artifacts.length > 10) {
                const toDelete = artifacts.slice(10);
                for (const artifact of toDelete) {
                  await github.rest.actions.deleteArtifact({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    artifact_id: artifact.id,
                  });
                }
              }
            }